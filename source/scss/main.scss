
@charset "utf-8";

@import "settings/settings.config";
@import "settings/fonts.config";
@import "settings/megatype.config";
@import "../../bower_components/megatype/megatype";


@include megatype;

html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

body {
  font-smooth: always;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  background-color: white;
}

::selection {
  background: deeppink;
  color: white;
}

h1, .h1 {
  font-weight: normal;
  font-family: font-family-of($sans);
  @include typeset($sans, 1rem * break-get(0, font-size-factor-extra-large), 2 * break-get(0, font-size-factor-large), 0, 3);
  @include min-width(1) {
    @include typeset($sans, 1rem * break-get(1, font-size-factor-extra-large), 2 * break-get(1, font-size-factor-large), 0, 3);
  }
  @include min-width(2) {
    @include typeset($sans, 1rem * break-get(2, font-size-factor-extra-large), 2 * break-get(2, font-size-factor-large), 0, 3);
  }
  @include min-width(3) {
    font-weight: 300;
    @include typeset($sans, 1rem * break-get(3, font-size-factor-extra-large), 2 * break-get(3, font-size-factor-large), 0, 3);
  }
  @include min-width(4) {
    font-weight: 300;
    @include typeset($sans, 1rem * break-get(4, font-size-factor-extra-large), 2 * break-get(4, font-size-factor-large), 0, 3);
  }
}

h2, .h2 {
  font-weight: normal;
  opacity: 0.5;
  font-family: font-family-of($sans);
  @include typeset($sans, 1rem * break-get(0, font-size-factor-small), 1 * break-get(0, font-size-factor-small), 4, 2);
  @include min-width(1) {
    @include typeset($sans, 1rem * break-get(1, font-size-factor-small), 1 * break-get(1, font-size-factor-small), 4, 2);
  }
  @include min-width(2) {
    @include typeset($sans, 1rem * break-get(2, font-size-factor-small), 1 * break-get(2, font-size-factor-small), 4, 2);
  }
  @include min-width(3) {
    @include typeset($sans, 1rem * break-get(3, font-size-factor-small), 1 * break-get(3, font-size-factor-small), 4, 2);
  }
  @include min-width(4) {
    @include typeset($sans, 1rem * break-get(4, font-size-factor-small), 1 * break-get(4, font-size-factor-small), 4, 2);
  }
}

p {
  font-family: font-family-of($sans);
  @include typeset($sans, 1rem * break-get(0, font-size-factor-medium), 2 * break-get(0, font-size-factor-medium), 0, 2);
  @include min-width(1) {
      @include typeset($sans, 1rem * break-get(1, font-size-factor-medium), 2 * break-get(1, font-size-factor-medium), 0, 2);
  }
  @include min-width(2) {
      @include typeset($sans, 1rem * break-get(2, font-size-factor-medium), 2 * break-get(2, font-size-factor-medium), 0, 2);
  }
  @include min-width(3) {
      @include typeset($sans, 1rem * break-get(3, font-size-factor-medium), 2 * break-get(3, font-size-factor-medium), 0, 2);
  }
  @include min-width(4) {
      @include typeset($sans, 1rem * break-get(4, font-size-factor-medium), 2 * break-get(4, font-size-factor-medium), 0, 2);
  }
}

.main {
  position: relative;
  background-color: white;
  padding: 2rem 0;
  z-index: 1;
  color: black;
}

.container {
  @include set-container;
  margin: 1rem * $ratio-large;
  @include min-width(1) {
    margin: (1rem * $ratio-large) auto;
  }
  @include min-width(2) {
    margin: (2rem * $ratio-large) auto;
  }
  @include min-width(3) {
    margin: (2rem * $ratio-large) auto;
  }
  @include min-width(4) {
    margin: (2rem * $ratio-large) auto;
  }
}

.footer {
  position: relative;
  height:100vh;
  width: 100%;
  z-index: 0;
  background-color: black;
}

.footer-inner {
  position: fixed;
  bottom: 0;
  width: 100%;
  color: white;

  a {
    color: white;
    text-decoration: none;
    &:hover {
      @include text-link($color: white, $hover: $color-hover, $offset: $link-offset, $opacity: $link-underline-opacity, $hover-opacity: $link-underline-hover-opacity);
    }
  }
}

.footer-bg {
  position: fixed;
  bottom: 0;
  width: 100%;
  height: 100vh;
  opacity: 0.8;
  background: #b9b9bb url('../img/bg2.jpg')no-repeat bottom right;
  background-attachment: fixed;
  background-size: cover;
}


// accordion

.accordion-trigger {
  display: block;
  margin-top: 4rem;
  font-weight: normal;
  opacity: 0.5;
  font-family: font-family-of($sans);
  @include typeset($sans, 1rem * break-get(0, font-size-factor-small), 1 * break-get(0, font-size-factor-small), 0, 0);
  @include min-width(1) {
    @include typeset($sans, 1rem * break-get(1, font-size-factor-small), 1 * break-get(1, font-size-factor-small), 0, 0);
  }
  @include min-width(2) {
    @include typeset($sans, 1rem * break-get(2, font-size-factor-small), 1 * break-get(2, font-size-factor-small), 0, 0);
  }
  @include min-width(3) {
    @include typeset($sans, 1rem * break-get(3, font-size-factor-small), 1 * break-get(3, font-size-factor-small), 0, 0);
  }
  @include min-width(4) {
    @include typeset($sans, 1rem * break-get(4, font-size-factor-small), 1 * break-get(4, font-size-factor-small), 0, 0);
  }
  text-decoration: none;
}

.accordion-panel {
  max-height: 1000px;
  opacity: 1;
  transition: opacity ease 0.75s, max-height ease 0.5s;
  visibility: visible;

  &.is-hidden {
    max-height: 0;
    opacity: 0;
    overflow: hidden;
    transition: all ease 0.5s;
    visibility: hidden;
  }
}

.accordion-panel__inner {
  padding: 2rem 0;
}

:focus {
  outline: none;
}

